*overseer.txt*
*Overseer* *overseer* *overseer.nvim*
--------------------------------------------------------------------------------
CONTENTS                                                       *overseer-contents*

  1. Commands..............................................|overseer-commands|
  2. Options................................................|overseer-options|
  3. Running tasks........................................|overseer.run_tasks|

--------------------------------------------------------------------------------
COMMANDS                                                       *overseer-commands*


OverseerOpen[!] `left` | `right`                                       *:OverseerOpen*
    Open the overseer window. With `!` cursor stays in current window
OverseerClose                                                     *:OverseerClose*
    Close the overseer window
OverseerToggle[!] `left` | `right`                                   *:OverseerToggle*
    Toggle the overseer window. With `!` cursor stays in current window
OverseerSaveBundle `[name]`                                    *:OverseerSaveBundle*
    Serialize and save the current tasks to disk
OverseerLoadBundle `[name]`                                    *:OverseerLoadBundle*
    Load tasks that were saved to disk
OverseerDeleteBundle `[name]`                                *:OverseerDeleteBundle*
    Delete a saved task bundle
OverseerRunCmd `[command]`                                         *:OverseerRunCmd*
    Run a raw shell command
OverseerRun `[name/tags]`                                             *:OverseerRun*
    Run a task from a template
OverseerBuild                                                     *:OverseerBuild*
    Open the task builder
OverseerQuickAction `[action]`                                *:OverseerQuickAction*
    Run an action on the most recent task
OverseerTaskAction                                           *:OverseerTaskAction*
    Select a task to run an action on

--------------------------------------------------------------------------------
OPTIONS                                                         *overseer-options*


>
    require("overseer").setup({
      -- Default task strategy
      strategy = "terminal",
      -- Template modules to load
      templates = { "builtin" },
      -- When true, tries to detect a green color from your colorscheme to use for success highlight
      auto_detect_success_color = true,
      -- Configure the task list
      task_list = {
        -- Default detail level for tasks. Can be 1-3.
        default_detail = 1,
        -- max_width = {100, 0.2} means "the lesser of 100 columns or 20% of total"
        max_width = { 100, 0.2 },
        -- min_width = {40, 0.1} means "the greater of 40 columns or 10% of total"
        min_width = { 40, 0.1 },
        -- String that separates tasks
        separator = "────────────────────────────────────────",
        -- Default direction. Can be "left" or "right"
        direction = "left",
        bindings = {
          ["?"] = "ShowHelp",
          ["<CR>"] = "RunAction",
          ["<C-e>"] = "Edit",
          ["o"] = "Open",
          ["<C-v>"] = "OpenVsplit",
          ["<C-f>"] = "OpenFloat",
          ["p"] = "TogglePreview",
          ["<C-l>"] = "IncreaseDetail",
          ["<C-h>"] = "DecreaseDetail",
          ["L"] = "IncreaseAllDetail",
          ["H"] = "DecreaseAllDetail",
          ["["] = "DecreaseWidth",
          ["]"] = "IncreaseWidth",
          ["{"] = "PrevTask",
          ["}"] = "NextTask",
        },
      },
      -- TODO: explain these
      actions = {},
      -- Configure the floating window used for task templates that require input
      -- and the floating window used for editing tasks
      form = {
        border = "rounded",
        zindex = 40,
        min_width = 80,
        max_width = 0.9,
        min_height = 10,
        max_height = 0.9,
        -- Set any window options here (e.g. winhighlight)
        win_opts = {
          winblend = 10,
        },
      },
      -- Configure the floating window used for confirmation prompts
      confirm = {
        border = "rounded",
        zindex = 40,
        min_width = 80,
        max_width = 0.5,
        min_height = 10,
        max_height = 0.9,
        -- Set any window options here (e.g. winhighlight)
        win_opts = {
          winblend = 10,
        },
      },
      -- Configuration for task floating windows
      task_win = {
        -- How much space to leave around the floating window
        padding = 2,
        border = "rounded",
        -- Set any window options here (e.g. winhighlight)
        win_opts = {
          winblend = 10,
        },
      },
      -- Aliases for bundles of components. Redefine the builtins, or create your own.
      component_aliases = {
        -- Most tasks are initialized with the default components
        default = {
          "on_output_summarize",
          "result_exit_code",
          "on_result_notify",
          "on_restart_handler",
          "dispose_delay",
        },
        -- Used for templates that define a task that should remain running and
        -- restart on failure (e.g. a server or file-watching build process)
        default_persist = {
          "on_output_summarize",
          "result_exit_code",
          "on_result_notify",
          "on_restart_handler",
          "on_result_restart",
        },
        -- Used for tasks generated from the VS Code integration (tasks.json)
        default_vscode = {
          "default",
          "on_result_diagnostics",
          "on_result_diagnostics_quickfix",
        },
      },
      -- A list of components to preload on setup.
      -- Only matters if you want them to show up in the task editor.
      preload_components = {},
      -- Configure where the logs go and what level to use
      -- Types are "echo", "notify", and "file"
      log = {
        {
          type = "echo",
          level = vim.log.levels.WARN,
        },
        {
          type = "file",
          filename = "overseer.log",
          level = vim.log.levels.WARN,
        },
      },
    })
<

--------------------------------------------------------------------------------
RUNNING TASKS                                                 *overseer.run_tasks*

The easiest way to select and run a task is `:OverseerRun`. This will open a
`vim.ui.select` dialog and allow the user to select a task. Once selected, if
the task requires any [parameters](#parameters), it will prompt the user for
input. Once all inputs are satisfied, the task is started.

If you want to customize how the tasks are searched, selected, or run, you can
call `overseer.run_template` directly. Some examples:

>
    -- Run the task named "make all"
    -- equivalent to :OverseerRun make all
    overseer.run_template({name = "make all"})
    -- Run the default "build" task
    -- equivalent to :OverseerRun BUILD
    overseer.run_template({tags = {overseer.TAG.BUILD}})
    -- Run the task named "serve" with some default parameters
    overseer.run_template({name = "serve", params = {port = 8080}})
    -- Create a task but do not start it
    overseer.run_template({name = "make", nostart = true}, function(task)
      -- do something with the task
    end)
    -- Run a task and immediately open the floating window
    overseer.run_template({name = "make", action = 'open float'})
    -- Run a task and always show the parameter prompt
    overseer.run_template({name = "npm watch", prompt = "always"})
<

================================================================================
vim:ft=help:et:ts=2:sw=2:sts=2:norl
